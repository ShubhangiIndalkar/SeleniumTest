// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationTask.FeatureFiles.AutomationPractice
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ContactUsPage", SourceFile="FeatureFiles\\AutomationPractice\\ContactUsPage.feature", SourceLine=0)]
    public partial class ContactUsPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactUsPage.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ContactUsPage", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
    testRunner.Given("I open AutomationPractice site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("I click on \'Contact us\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Contact Us page when you click on Contact Us", new string[] {
                "TestCase1"}, SourceLine=7)]
        public virtual void ShouldBeAbleToViewContactUsPageWhenYouClickOnContactUs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Contact Us page when you click on Contact Us", new string[] {
                        "TestCase1"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 9
 testRunner.Then("I am able to view the \'Contact Us\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Contact page title as \'Contact us - My Store\'", new string[] {
                "TestCase2"}, SourceLine=11)]
        public virtual void ShouldBeAbleToViewContactPageTitleAsContactUs_MyStore()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Contact page title as \'Contact us - My Store\'", new string[] {
                        "TestCase2"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 13
 testRunner.Then("I am able to view the Contact Us page title as \'Contact us - My Store\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Error message when you click on send button without enter " +
            "email address", new string[] {
                "TestCase3"}, SourceLine=15)]
        public virtual void ShouldBeAbleToViewErrorMessageWhenYouClickOnSendButtonWithoutEnterEmailAddress()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Error message when you click on send button without enter " +
                    "email address", new string[] {
                        "TestCase3"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 17
   testRunner.When("I click on \'Send\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
   testRunner.Then("I am able to view the Error message as \'Invalid email address.\' on \'Contact us\' p" +
                    "age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Error message when you click on send button with email id " +
            "and without enter message", new string[] {
                "TestCase4"}, SourceLine=20)]
        public virtual void ShouldBeAbleToViewErrorMessageWhenYouClickOnSendButtonWithEmailIdAndWithoutEnterMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Error message when you click on send button with email id " +
                    "and without enter message", new string[] {
                        "TestCase4"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 22
   testRunner.And("I enter \'Email id\' as \'abc@g.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
   testRunner.When("I click on \'Send\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
   testRunner.Then("I am able to view the Error message as \'The message cannot be blank.\' on \'Contact" +
                    " us\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Error message when you click on send button with email id " +
            "and message and without select subject", new string[] {
                "TestCase5"}, SourceLine=26)]
        public virtual void ShouldBeAbleToViewErrorMessageWhenYouClickOnSendButtonWithEmailIdAndMessageAndWithoutSelectSubject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Error message when you click on send button with email id " +
                    "and message and without select subject", new string[] {
                        "TestCase5"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 28
   testRunner.Given("I enter \'Email id\' as \'abc@g.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
   testRunner.And("I enter \'Message\' as \'fkjhfh\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
   testRunner.When("I click on \'Send\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
   testRunner.Then("I am able to view the Error message as \'Please select a subject from the list pro" +
                    "vided.\' on \'Contact us\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view success message when you enter all necessary field for sen" +
            "d message", new string[] {
                "TestCase6"}, SourceLine=33)]
        public virtual void ShouldBeAbleToViewSuccessMessageWhenYouEnterAllNecessaryFieldForSendMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view success message when you enter all necessary field for sen" +
                    "d message", new string[] {
                        "TestCase6"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 35
   testRunner.Given("I enter \'Email id\' as \'abc@g.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
   testRunner.And("I enter \'Message\' as \'fkjhfh\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
   testRunner.And("I select \'Subject\' as \'Webmaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
   testRunner.When("I click on \'Send\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
   testRunner.Then("I am able to view the success message as \'Your message has been successfully sent" +
                    " to our team.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Home button after getting success message of send message", new string[] {
                "TestCase7"}, SourceLine=41)]
        public virtual void ShouldBeAbleToViewHomeButtonAfterGettingSuccessMessageOfSendMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Home button after getting success message of send message", new string[] {
                        "TestCase7"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 43
   testRunner.Given("I enter \'Email id\' as \'abc@g.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
   testRunner.And("I enter \'Message\' as \'fkjhfh\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
   testRunner.And("I select \'Subject\' as \'Webmaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
   testRunner.When("I click on \'Send\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
   testRunner.Then("I am able to view the success message as \'Your message has been successfully sent" +
                    " to our team.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
   testRunner.And("I am able to view the Home button to navigate Home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view Error message when you enter wrong email id", new string[] {
                "TestCase8"}, SourceLine=50)]
        public virtual void ShouldBeAbleToViewErrorMessageWhenYouEnterWrongEmailId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view Error message when you enter wrong email id", new string[] {
                        "TestCase8"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 52
   testRunner.Given("I enter \'Email id\' as \'abc\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
   testRunner.When("I click on \'Send\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
   testRunner.Then("I am able to view the Error message as \'Invalid email address.\' on \'Contact us\' p" +
                    "age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view the help comment when select Customer Service subject", new string[] {
                "TestCase9"}, SourceLine=56)]
        public virtual void ShouldBeAbleToViewTheHelpCommentWhenSelectCustomerServiceSubject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view the help comment when select Customer Service subject", new string[] {
                        "TestCase9"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 58
  testRunner.When("I select \'Subject\' as \'Customer service\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
  testRunner.Then("I am able to view the Comment as \'For any question about a product, an order\' for" +
                    " \'Customer service\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should be able to view the help comment when select Webmaster subject", new string[] {
                "TestCase10"}, SourceLine=61)]
        public virtual void ShouldBeAbleToViewTheHelpCommentWhenSelectWebmasterSubject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to view the help comment when select Webmaster subject", new string[] {
                        "TestCase10"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 63
  testRunner.When("I select \'Subject\' as \'Webmaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
  testRunner.Then("I am able to view the Comment as \'If a technical problem occurs on this website\' " +
                    "for \'Webmaster\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
